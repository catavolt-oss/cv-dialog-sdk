///<reference path="../../typings/react/react.d.ts"/>
///<reference path="../../typings/react/react-dom.d.ts"/>
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { CatavoltPane, CvLoginPane, CvAppWindow, CvWorkbench, CvScope, CvLauncher, CvNavigation, CvForm, CvList, CvRecord, CvProp, CvResource } from './catreat';
import { Log, LogLevel } from './catavolt';
Log.logLevel(LogLevel.DEBUG);
ReactDOM.render(React.createElement("div", {"className": "container"}, React.createElement(CatavoltPane, null, React.createElement("div", null, React.createElement("div", {"className": "header"}), React.createElement(CvLoginPane, null), React.createElement(CvAppWindow, null, React.createElement("span", null, React.createElement(CvWorkbench, {"workbenchId": "AAABACffAAAABpZL", "persistent": false}, React.createElement("div", {"className": "panel panel-primary"}, React.createElement("div", {"className": "panel-heading"}, React.createElement("h3", {"className": "panel-title"}, React.createElement(CvScope, {"get": 'name'}))), React.createElement("div", {"className": "panel-body row"}, React.createElement(CvLauncher, {"actionId": "AAABACfaAAAABpIk", "navTarget": "1"}, React.createElement(CvScope, {"handler": (launcher) => {
    return React.createElement("div", {"className": "col-sm-8 launch-div"}, React.createElement("img", {"className": "launch-icon img-responsive center-block", "src": launcher.iconBase}), React.createElement("h4", {"className": "launch-text small text-center"}, launcher.name));
}}))))), React.createElement(CvNavigation, {"targetId": "1", "persistent": false}, React.createElement(CvForm, null, React.createElement("div", {"className": "panel panel-primary"}, React.createElement("div", {"className": "panel-heading"}, React.createElement("h4", null, React.createElement(CvScope, {"get": 'paneTitle'}))), React.createElement("div", {"style": { maxHeight: '800px', overflow: 'auto' }}, React.createElement("ul", {"className": 'list-group'}, React.createElement(CvList, {"paneRef": 0, "wrapperElem": "h4"}, React.createElement(CvRecord, {"clickAction": 'default', "navTarget": "2"}, React.createElement("li", {"className": 'list-group-item'}, React.createElement(CvProp, {"propName": 'name'}))))))))), React.createElement(CvNavigation, {"targetId": "2"}, React.createElement(CvForm, null, React.createElement("div", {"className": "panel panel-primary"}, React.createElement("div", {"className": "panel-heading"}, React.createElement("h4", null, "Messages"), React.createElement("div", {"className": "messageToolbar text-right"}, React.createElement(CvResource, {"resourceName": 'icon-action-join.png'}), React.createElement("a", {"className": "hlText"}, "New Message"))), React.createElement("div", {"style": { maxHeight: '800px', overflow: 'auto' }}, React.createElement("div", {"className": "messageCol"}, React.createElement(CvList, {"paneRef": 0, "wrapperElem": "span"}, React.createElement(CvRecord, null, React.createElement("div", {"className": "row"}, React.createElement("div", {"className": "col-sm-12"}, React.createElement("div", {"className": "messagePanel"}, React.createElement("div", {"className": "row"}, React.createElement("div", {"className": "col-sm-6"}, React.createElement("div", {"className": "row"}, React.createElement("div", {"className": "col-sm-2"}, React.createElement(CvProp, {"propName": 'avatar_large', "className": 'img-rounded avatar'})), React.createElement("div", {"className": "col-sm-4 text-center attrib-box"}, React.createElement("h4", null, React.createElement(CvProp, {"propName": 'created-by'})), React.createElement("small", null, React.createElement(CvProp, {"propName": 'group_name'})), React.createElement("small", {"className": "text-muted"}, React.createElement(CvProp, {"propName": 'created-at'}))))), React.createElement("div", {"className": "col-sm-6"}, React.createElement("div", {"className": "pull-right"}, React.createElement(CvProp, {"propName": 'is_flagged', "handler": (prop) => {
    return prop.value ?
        React.createElement(CvResource, {"resourceName": 'icon-bookmark.png', "style": { width: 24, height: 38 }}) :
        React.createElement(CvResource, {"resourceName": 'icon-bookmark-unchecked.png', "style": { width: 24, height: 38 }});
}})))), React.createElement("div", {"className": "like-row"}, React.createElement("span", null, React.createElement(CvProp, {"propName": 'likes_count'})), React.createElement("span", null, "liked"), React.createElement("span", null), React.createElement("span", null), React.createElement("span", null, React.createElement(CvProp, {"propName": 'comments_count'})), React.createElement("span", null, "comments")), React.createElement("div", null, React.createElement("div", null, React.createElement(CvProp, {"propName": 'title'})), React.createElement("blockquote", null, React.createElement("p", null, React.createElement(CvProp, {"propName": 'body_preview'}))), React.createElement("div", {"className": "text-center"}, function () {
    const attachments = [];
    for (let i = 1; i <= 10; i++) {
        attachments.push(React.createElement(CvProp, {"propName": 'attachment_preview_' + i, "key": '' + i}));
    }
    return attachments;
}())), React.createElement("div", {"className": "badge-row"}, React.createElement("div", {"className": "text-right"}, React.createElement(CvResource, {"resourceName": 'icon-action-comment.png', "style": { width: 24, height: 24 }})))))))))))))))))), document.getElementById('cvApp'));
